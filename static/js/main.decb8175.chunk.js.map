{"version":3,"sources":["components/Search.jsx","api/weatherApi.jsx","components/Weathercard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Search","_ref","onCitySelect","query","setQuery","useState","cities","setCities","useEffect","async","response","axios","get","params","key","q","data","error","console","fetchCities","React","createElement","className","type","value","onChange","e","target","placeholder","length","map","city","id","onClick","cityName","handleCityClick","name","country","WeatherCard","_forecast$forecastday","cityKey","weatherData","setWeatherData","setError","localStorage","removeItem","storedData","getItem","JSON","parse","fetch","concat","json","log","setItem","stringify","fetchWeather","location","current","forecast","forecastday","temp_c","condition","text","wind_kph","uv","day","maxtemp_c","mintemp_c","daily_chance_of_rain","astro","sunrise","sunset","src","icon","alt","App","setCityKey","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.decb8175.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Search.css';\r\nimport DigitalClock from './DigitalClock';\r\nimport apiKey1 from '../api/weatherApi';\r\n\r\nconst Search = ({ onCitySelect }) => {\r\n  const [query, setQuery] = useState('');  // Input value for city search\r\n  const [cities, setCities] = useState([]);  // To store search results\r\n\r\n  const apiKey = apiKey1;  // WeatherAPI key\r\n  \r\n  useEffect(() => {\r\n    if (query) {\r\n      const fetchCities = async () => {\r\n        try {\r\n          const response = await axios.get(`http://api.weatherapi.com/v1/search.json`, {\r\n            params: {\r\n              key: apiKey,\r\n              q: query,  // City search query\r\n            },\r\n          });\r\n\r\n          setCities(response.data);  // Set the list of cities returned from the search\r\n        } catch (error) {\r\n          console.error('Error fetching city data:', error);\r\n        }\r\n      };\r\n\r\n      fetchCities();  // Fetch cities as the query changes\r\n    } else {\r\n      setCities([]);  // Clear cities when the query is empty\r\n    }\r\n  }, [query]);  // Trigger this effect whenever the query changes\r\n\r\n  // Handle city selection\r\n  const handleCityClick = (cityName) => {\r\n    onCitySelect(cityName);  // Pass the selected city name to the parent\r\n    setQuery('');  // Clear the search field after selecting a city\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchbar-container\">\r\n      <input \r\n        type=\"text\" \r\n        value={query} \r\n        onChange={(e) => setQuery(e.target.value)} \r\n        placeholder=\"Enter city name\"\r\n        // defaultValue=\"Razam\"\r\n\r\n      />\r\n\r\n      {cities.length > 0 && (\r\n        <div className=\"city-list\">\r\n          {cities.map((city) => (\r\n            <div \r\n              key={city.id} \r\n              className=\"city\" \r\n              onClick={() => handleCityClick(city.name)}  // Call the click handler on city select\r\n            >\r\n              <p>{city.name}, {city.country}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n\r\n","const apiKey1=\"28af5ec20b63410ca4261836241712\";\r\nexport default apiKey1;","import React, { useEffect, useState } from \"react\";\r\n\r\nimport './WeatherCard.css';\r\nimport apiKey1 from \"../api/weatherApi\";\r\nconst WeatherCard = ({ cityKey }) => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const apiKey=apiKey1;\r\n\r\n  useEffect(() => {\r\n    // Clear old data from localStorage whenever cityKey changes\r\n    localStorage.removeItem(\"weatherData\");\r\n\r\n    const fetchWeather = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${cityKey}&days=1`\r\n        );\r\n        const data = await response.json();\r\n        console.log(\"Fetched Data:\", data);\r\n\r\n        // Store the fetched data in localStorage\r\n        localStorage.setItem(\"weatherData\", JSON.stringify(data));\r\n\r\n        // Set weather data in state\r\n        setWeatherData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching weather data:\", error);\r\n        setError(\"Failed to fetch weather data.\");\r\n      }\r\n    };\r\n\r\n    // Check if data is already stored in localStorage\r\n    const storedData = localStorage.getItem(\"weatherData\");\r\n    if (storedData) {\r\n      setWeatherData(JSON.parse(storedData));\r\n    } else {\r\n      fetchWeather(); // Fetch new data if no data in localStorage\r\n    }\r\n  }, [cityKey]); // Re-fetch when cityKey changes\r\n\r\n  if (error) {\r\n    return <div className=\"class1\">{error}</div>;\r\n  }\r\n\r\n  if (!weatherData) {\r\n    return <div className=\"class1\">Loading...</div>;\r\n  }\r\n\r\n  const { location, current, forecast } = weatherData;\r\n  const forecastDay = forecast?.forecastday?.[0];\r\n\r\n  if (!forecastDay) {\r\n    return <div className=\"class1\">No forecast data available.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"weather-container\">\r\n      <h1 className=\"city-name\">{location.name} , {location.country}</h1>\r\n      {/* <h1 className=\"date\">{forecast.forecastday[0].date}</h1> */}\r\n  <ul className=\"weather-row\">\r\n \r\n    <li className=\"current-card card\">\r\n      <h2>Current Weather</h2>\r\n        <p><b>Temperature</b>: {current.temp_c}°C</p>\r\n        <p><b>Condition</b>: {current.condition.text}</p>\r\n        <p><b>Wind Speed</b>: {current.wind_kph} km/h</p>\r\n        <p><b>UV Index</b>: {current.uv}</p>\r\n    </li>\r\n\r\n    <li className=\"weather-card card\">\r\n      <h2>Today report </h2>\r\n      <p><b>Max Temperature</b>: {forecast.forecastday[0].day.maxtemp_c}°C</p>\r\n      <p><b>Min Temperature</b>: {forecast.forecastday[0].day.mintemp_c}°C</p>\r\n      <p><b>Condition</b>: {forecast.forecastday[0].day.condition.text}</p>\r\n      <p><b>Precipitation </b>: {forecast.forecastday[0].day.daily_chance_of_rain}%</p>\r\n    </li>\r\n\r\n    <li className=\"astro-card card\">\r\n      <p><b>Sunrise</b>: {forecast.forecastday[0].astro.sunrise}</p>\r\n      <p><b>Sunset </b>: {forecast.forecastday[0].astro.sunset}</p>\r\n      <img src={current.condition.icon} alt=\"weather\"></img>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n\r\n","import React, { useState } from \"react\";\r\nimport Search from \"./components/Search\";\r\nimport WeatherCard from \"./components/Weathercard\";\r\nimport \"./App.css\";\r\nimport DigitalClock from \"./components/DigitalClock\";\r\n\r\n\r\nconst App = () => {\r\n  const [cityKey, setCityKey] = useState(\"Razam\"); // To store the selected city\r\n\r\n  // This function will update the cityKey when a city is selected from the Search component\r\n  const handleCitySelect = (city) => {\r\n    setCityKey(city); // Set the selected city for the WeatherCard\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app-container\">\r\n        <div className=\"searchbar-container\">\r\n          <Search onCitySelect={handleCitySelect} />\r\n        </div>\r\n        {/* <DigitalClock/> */}\r\n        <div className=\"weather-container\">\r\n          {cityKey && <WeatherCard cityKey={cityKey} />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}